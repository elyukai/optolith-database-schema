{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "/_Activatable.schema.json",
  "$defs": {
    "Id": {
      "description": "The activatable entry's identifier. An unique, increasing integer.",
      "type": "integer",
      "minimum": 0
    },
    "Name": {
      "description": "The name of the activatable entry.",
      "type": "string",
      "minLength": 1
    },
    "NameInLibrary": {
      "description": "The full name of the entry as stated in the sources. Only use when `name` needs to be different from full name for text generation purposes.",
      "type": "string",
      "minLength": 1
    },
    "Levels": {
      "description": "Number of available levels.",
      "type": "integer",
      "minimum": 2
    },
    "Maximum": {
      "description": "The number stating how often you can buy the entry. The **default** depends on the entry type:\n\n- **Advantage:** `1` in all cases (as specified in the **Core Rules**)\n- **Disadvantage:** `1` in all cases (as specified in the **Core Rules**)\n- **Special Abilities:** `1` if no options can be selected, otherwise the\n  number of possible options\n\nThe maximum is only set if it differs from the defaults specified above.",
      "type": "integer",
      "minimum": 1
    },
    "SelectOptions": {
      "description": "Definitions for possible options for the activatable entry. They can either be derived from entry categories or be defined explicitly. Both can happen as well, but if there is an explicitly defined select option and a derived select option has the same identifier (which may only happen if skill or combat technique identifiers are used for explicit select options), the explicit definition overwrites the derived option.\n\nNote that this is only a full definition of options for simple logic that can be made explicit using the more detailed configuration for both derived categories and explicit options. There are quite a few entries whose option logic cannot be fully represented here, so that it needs to be implemented manually.",
      "type": "object",
      "properties": {
        "derived": {
          "description": "An entry category with optional further configuration. All available entries from the specified categories will be included as separate select options. You can also specify a set of groups that should only be included. Groups not mentioned will be excluded then.",
          "$ref": "./_ActivatableSelectOptionCategory.schema.json#/$defs/SelectOptionCategory"
        },
        "explicit": {
          "description": "A list of explicit select options. If the identifier has a specific type, its entry is the base of this select option, where values defined here override values from the base. Define the `src` property if the options are not derived from the rules text of the advantage/disadvantage/special ability but instead are listed in a separate block and/or on a separate page.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ExplicitSelectOption"
          },
          "minItems": 1
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "ExplicitSelectOption": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "General"
            },
            "general": {
              "$ref": "#/$defs/ExplicitGeneralSelectOption"
            }
          },
          "required": [
            "tag",
            "general"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Skill"
            },
            "skill": {
              "$ref": "#/$defs/ExplicitSkillSelectOption"
            }
          },
          "required": [
            "tag",
            "skill"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "CombatTechnique"
            },
            "combat_technique": {
              "$ref": "#/$defs/ExplicitCombatTechniqueSelectOption"
            }
          },
          "required": [
            "tag",
            "combat_technique"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ExplicitGeneralSelectOption": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The option's identifier. An unique, increasing integer.",
          "type": "integer",
          "minimum": 1
        },
        "profession_only": {
          "description": "Sometimes, professions use specific text selections that are not contained in described lists. This ensures you can use them for professions only. They are not going to be displayed as options to the user.",
          "const": true
        },
        "skill_applications": {
          "description": "Registers new applications, which get enabled once this entry is activated with its respective select option. It specifies an entry-unique identifier and the skill it belongs to. A translation can be left out if its name equals the name of the origin select option.",
          "$ref": "#/$defs/SkillApplications"
        },
        "skill_uses": {
          "description": "Registers uses, which get enabled once this entry is activated with its respective select option. It specifies an entry-unique identifier and the skill it belongs to. A translation can be left out if its name equals the name of the origin select option.",
          "$ref": "#/$defs/SkillUses"
        },
        "prerequisites": {
          "$ref": "./_Prerequisite.schema.json#/$defs/GeneralPrerequisites"
        },
        "binding_cost": {
          "description": "Specific binding cost for the select option. Only has an effect if the associated entry supports binding costs.",
          "type": "integer",
          "minimum": 0
        },
        "ap_value": {
          "description": "Specific AP cost for the select option.",
          "type": "integer",
          "minimum": 1
        },
        "src": {
          "$ref": "./source/_PublicationRef.schema.json#/$defs/PublicationRefs"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/ExplicitGeneralSelectOptionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "id",
        "translations"
      ],
      "additionalProperties": false
    },
    "ExplicitGeneralSelectOptionTranslation": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the select option.",
          "type": "string",
          "minLength": 1
        },
        "name_in_profession": {
          "description": "The name of the select option when displayed in a generated profession text.",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "description": "The description of the select option. Useful for Bad Habits, Trade Secrets and other entries where a description is available.",
          "type": "string",
          "minLength": 1
        },
        "errata": {
          "$ref": "./source/_Erratum.schema.json#/$defs/Errata"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "ExplicitSkillSelectOption": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The skill's identifier. An unique, increasing integer.",
          "$ref": "./_Identifier.schema.json#/$defs/SkillIdentifier"
        },
        "skill_applications": {
          "description": "Registers new applications, which get enabled once this entry is activated with its respective select option. It specifies an entry-unique identifier and the skill it belongs to. A translation can be left out if its name equals the name of the origin select option.",
          "type": "array",
          "items": {
            "$ref": "./_ActivatableSelectOptionCategory.schema.json#/$defs/SkillApplicationOrUse"
          },
          "minItems": 1
        },
        "skill_uses": {
          "description": "Registers uses, which get enabled once this entry is activated with its respective select option. It specifies an entry-unique identifier and the skill it belongs to. A translation can be left out if its name equals the name of the origin select option.",
          "type": "array",
          "items": {
            "$ref": "./_ActivatableSelectOptionCategory.schema.json#/$defs/SkillApplicationOrUse"
          },
          "minItems": 1
        },
        "prerequisites": {
          "$ref": "./_Prerequisite.schema.json#/$defs/GeneralPrerequisites"
        },
        "binding_cost": {
          "description": "Specific binding cost for the select option. Only has an effect if the associated entry supports binding costs.",
          "type": "integer",
          "minimum": 0
        },
        "ap_value": {
          "description": "Specific AP cost for the select option.",
          "type": "integer",
          "minimum": 1
        },
        "src": {
          "$ref": "./source/_PublicationRef.schema.json#/$defs/PublicationRefs"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/ExplicitSkillSelectOptionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "ExplicitSkillSelectOptionTranslation": {
      "type": "object",
      "properties": {
        "errata": {
          "$ref": "./source/_Erratum.schema.json#/$defs/Errata"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "ExplicitCombatTechniqueSelectOption": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The combat technique's identifier.",
          "$ref": "./_IdentifierGroup.schema.json#/$defs/CombatTechniqueIdentifier"
        },
        "prerequisites": {
          "$ref": "./_Prerequisite.schema.json#/$defs/GeneralPrerequisites"
        },
        "binding_cost": {
          "description": "Specific binding cost for the select option. Only has an effect if the associated entry supports binding costs.",
          "type": "integer",
          "minimum": 0
        },
        "ap_value": {
          "description": "Specific AP cost for the select option.",
          "type": "integer",
          "minimum": 1
        },
        "src": {
          "$ref": "./source/_PublicationRef.schema.json#/$defs/PublicationRefs"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/ExplicitCombatTechniqueSelectOptionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "ExplicitCombatTechniqueSelectOptionTranslation": {
      "type": "object",
      "properties": {
        "errata": {
          "$ref": "./source/_Erratum.schema.json#/$defs/Errata"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "Rules": {
      "description": "The rule text.",
      "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyMarkdown"
    },
    "Effect": {
      "description": "The effect description.",
      "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyMarkdown"
    },
    "CombatSpecialAbilityUsageType": {
      "description": "The definition of how the combat special ability can be used in combat.",
      "oneOf": [
        {
          "const": "Passive"
        },
        {
          "const": "BasicManeuver"
        },
        {
          "const": "SpecialManeuver"
        }
      ]
    },
    "CombatSpecialAbilityType": {
      "description": "The definition of if the combat special ability can be used when armed or when unarmed.",
      "oneOf": [
        {
          "const": "Armed"
        },
        {
          "const": "Unarmed"
        }
      ]
    },
    "SkillApplications": {
      "description": "Registers new skill applications, which get enabled once this entry is activated. It specifies an entry-unique identifier and the skill it belongs to. A translation can be left out if its name equals the name of the origin activatable entry.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/SkillApplication"
      },
      "minItems": 1
    },
    "SkillApplication": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The application's identifier. An entry-unique, increasing integer.",
          "type": "integer",
          "minimum": 1
        },
        "skill": {
          "description": "The skill(s) this application belongs to.",
          "$ref": "#/$defs/SkillApplicationAssociatedSkill"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/SkillApplicationTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "id",
        "skill"
      ],
      "additionalProperties": false
    },
    "SkillApplicationAssociatedSkill": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Single"
            },
            "single": {
              "$ref": "./_SimpleReferences.schema.json#/$defs/SkillReference"
            }
          },
          "required": [
            "tag",
            "single"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Multiple"
            },
            "multiple": {
              "$ref": "#/$defs/SkillApplicationAssociatedSkills"
            }
          },
          "required": [
            "tag",
            "multiple"
          ],
          "additionalProperties": false
        }
      ]
    },
    "SkillApplicationAssociatedSkills": {
      "type": "object",
      "properties": {
        "list": {
          "description": "The skills this application belongs to.",
          "type": "array",
          "items": {
            "$ref": "./_SimpleReferences.schema.json#/$defs/SkillReference"
          },
          "minItems": 2
        },
        "required_skill_rating": {
          "description": "If an application applies to multiple skills, it may need to ensure the respective skill is on a certain skill rating if the activatable entry cannot ensure this prerequisite.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "SkillApplicationTranslation": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the application if different from the activatable entry's name.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "SkillUses": {
      "description": "Registers uses, which get enabled once this entry is activated. It specifies an entry-unique identifier and the skill it belongs to. A translation can be left out if its name equals the name of the origin activatable entry.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/SkillUse"
      },
      "minItems": 1
    },
    "SkillUse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The use's identifier. An entry-unique, increasing integer.",
          "type": "integer",
          "minimum": 1
        },
        "skill": {
          "description": "The skill(s) this use belongs to.",
          "$ref": "#/$defs/SkillUseAssociatedSkill"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/SkillUseTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "id",
        "skill"
      ],
      "additionalProperties": false
    },
    "SkillUseAssociatedSkill": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Single"
            },
            "single": {
              "$ref": "./_SimpleReferences.schema.json#/$defs/SkillReference"
            }
          },
          "required": [
            "tag",
            "single"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Multiple"
            },
            "multiple": {
              "$ref": "#/$defs/SkillUseAssociatedSkills"
            }
          },
          "required": [
            "tag",
            "multiple"
          ],
          "additionalProperties": false
        }
      ]
    },
    "SkillUseAssociatedSkills": {
      "type": "object",
      "properties": {
        "list": {
          "description": "The skills this use belongs to.",
          "type": "array",
          "items": {
            "$ref": "./_SimpleReferences.schema.json#/$defs/SkillReference"
          },
          "minItems": 2
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "SkillUseTranslation": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the use if different from the activatable entry's name.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "Penalty": {
      "description": "The penalty the special ability gives when used.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Single"
            },
            "single": {
              "$ref": "#/$defs/SinglePenalty"
            }
          },
          "required": [
            "tag",
            "single"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ByHandedness"
            },
            "by_handedness": {
              "$ref": "#/$defs/PenaltyByHandedness"
            }
          },
          "required": [
            "tag",
            "by_handedness"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ByActivation"
            },
            "by_activation": {
              "$ref": "#/$defs/PenaltyByActivation"
            }
          },
          "required": [
            "tag",
            "by_activation"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Selection"
            },
            "selection": {
              "$ref": "#/$defs/PenaltySelection"
            }
          },
          "required": [
            "tag",
            "selection"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ByLevel"
            },
            "by_level": {
              "$ref": "#/$defs/PenaltyByLevel"
            }
          },
          "required": [
            "tag",
            "by_level"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ByAttack"
            },
            "by_attack": {
              "$ref": "#/$defs/PenaltyByAttack"
            }
          },
          "required": [
            "tag",
            "by_attack"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "DependsOnHitZone"
            },
            "depends_on_hit_zone": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "depends_on_hit_zone"
          ],
          "additionalProperties": false
        }
      ]
    },
    "SinglePenalty": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The penalty value.",
          "type": "integer"
        },
        "applies_to_parry": {
          "description": "Set to `true` if the penalty applies to the parry instead of the attack.",
          "const": true
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "PenaltyByHandedness": {
      "type": "object",
      "properties": {
        "one_handed": {
          "description": "The penalty value for one-handed weapons.",
          "type": "integer"
        },
        "two_handed": {
          "description": "The penalty value for two-handed weapons.",
          "type": "integer"
        },
        "applies_to_parry": {
          "description": "Set to `true` if the penalty applies to the parry instead of the attack.",
          "const": true
        }
      },
      "required": [
        "one_handed",
        "two_handed"
      ],
      "additionalProperties": false
    },
    "PenaltyByActivation": {
      "type": "object",
      "properties": {
        "active": {
          "description": "The penalty value if the entry has been bought by the character.",
          "type": "integer"
        },
        "inactive": {
          "description": "The penalty value if the entry has not been bought by the character.",
          "type": "integer"
        },
        "applies_to_parry": {
          "description": "Set to `true` if the penalty applies to the parry instead of the attack.",
          "const": true
        }
      },
      "required": [
        "active",
        "inactive"
      ],
      "additionalProperties": false
    },
    "PenaltySelection": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/$defs/PenaltySelectionOptions"
        }
      },
      "required": [
        "options"
      ],
      "additionalProperties": false
    },
    "PenaltySelectionOptions": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Specific"
            },
            "specific": {
              "$ref": "#/$defs/SpecificPenaltySelectionOptions"
            }
          },
          "required": [
            "tag",
            "specific"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Range"
            },
            "range": {
              "$ref": "#/$defs/PenaltySelectionOptionsRange"
            }
          },
          "required": [
            "tag",
            "range"
          ],
          "additionalProperties": false
        }
      ]
    },
    "SpecificPenaltySelectionOptions": {
      "type": "object",
      "properties": {
        "list": {
          "description": "The list of specific penalty options.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/SpecificPenaltySelectionOption"
          },
          "minItems": 2,
          "uniqueItems": true
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "SpecificPenaltySelectionOption": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The penalty value.",
          "type": "integer"
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "PenaltySelectionOptionsRange": {
      "type": "object",
      "properties": {
        "minimum": {
          "description": "The minimum penalty value.",
          "type": "integer"
        },
        "maximum": {
          "description": "The maximum penalty value.",
          "type": "integer"
        }
      },
      "required": [
        "minimum",
        "maximum"
      ],
      "additionalProperties": false
    },
    "PenaltyByLevel": {
      "type": "object",
      "properties": {
        "levels": {
          "description": "A continuous range of penalties for each level. The first element is the penalty for the first level, the second element is the penalty for the second level, and so on.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PenaltyByLevelLevel"
          },
          "minItems": 2
        },
        "external": {
          "description": "The combat-related special ability of which the level defines the penalty instead.",
          "$ref": "#/$defs/PenaltyByExternalLevel"
        }
      },
      "required": [
        "levels"
      ],
      "additionalProperties": false
    },
    "PenaltyByLevelLevel": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The penalty value for this level.",
          "type": "integer"
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "PenaltyByExternalLevel": {
      "description": "The combat-related special ability of which the level defines the penalty instead.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier of the combat-related special ability of which the level defines the penalty instead.",
          "$ref": "./_IdentifierGroup.schema.json#/$defs/CombatRelatedSpecialAbilityIdentifier"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "PenaltyByAttack": {
      "type": "object",
      "properties": {
        "list": {
          "description": "A list of penalties for subsequent attacks. The first element is the penalty for the first attack, the second element is the penalty for the second attack, and so on. The order of the first element may be changed using `initial_order`, so that e.g. if set to `2`, the first element is the penalty for the second attack, the second element is the penalty for the third attack, and so on.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PenaltyByAttackOrderItem"
          },
          "minItems": 1
        },
        "initial_order": {
          "description": "The order of the first element in the `list` of penalties.",
          "type": "number"
        },
        "attack_replacement": {
          "description": "Set if a predefined different word should be used instead of the word\n`attack` for display purposes.",
          "$ref": "#/$defs/PenaltyByAttackReplacement"
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "PenaltyByAttackOrderItem": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The penalty value for this order.",
          "type": "integer"
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "PenaltyByAttackReplacement": {
      "description": "Set if a predefined different word should be used instead of the word\n`attack` for display purposes.",
      "const": "Throw"
    },
    "EnchantmentCost": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ArcaneEnergyCost"
            },
            "arcane_energy_cost": {
              "$ref": "#/$defs/ArcaneEnergyCost"
            }
          },
          "required": [
            "tag",
            "arcane_energy_cost"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "BindingCost"
            },
            "binding_cost": {
              "$ref": "#/$defs/BindingCost"
            }
          },
          "required": [
            "tag",
            "binding_cost"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ArcaneEnergyCost": {
      "description": "The AE Cost.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Fixed"
            },
            "fixed": {
              "$ref": "#/$defs/FixedArcaneEnergyCost"
            }
          },
          "required": [
            "tag",
            "fixed"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PerCountable"
            },
            "per_countable": {
              "$ref": "#/$defs/ArcaneEnergyCostPerCountable"
            }
          },
          "required": [
            "tag",
            "per_countable"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Interval"
            },
            "interval": {
              "$ref": "#/$defs/IntervalArcaneEnergyCost"
            }
          },
          "required": [
            "tag",
            "interval"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ActivationAndHalfInterval"
            },
            "activation_and_half_interval": {
              "$ref": "#/$defs/ActivationAndHalfIntervalArcaneEnergyCost"
            }
          },
          "required": [
            "tag",
            "activation_and_half_interval"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Indefinite"
            },
            "indefinite": {
              "$ref": "#/$defs/IndefiniteArcaneEnergyCost"
            }
          },
          "required": [
            "tag",
            "indefinite"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Disjunction"
            },
            "disjunction": {
              "$ref": "#/$defs/ArcaneEnergyCostDisjunction"
            }
          },
          "required": [
            "tag",
            "disjunction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Variable"
            },
            "variable": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "variable"
          ],
          "additionalProperties": false
        }
      ]
    },
    "FixedArcaneEnergyCost": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The AE cost value.",
          "type": "integer",
          "minimum": 1
        },
        "is_permanent": {
          "description": "Set to `true` if the AE costs are permanent.",
          "const": true
        },
        "interval": {
          "description": "Specified if the AE cost `value` has to be paid for each time interval.",
          "$ref": "./_ActivatableSkillDuration.schema.json#/$defs/DurationUnitValue"
        },
        "per_level": {
          "description": "The AE cost are per level of the enchantment. It may either be displayed in a compressed way (e.g. `1 AE per level`) or in a verbose way (e.g. `1 AE for level I; 2 AE for level II`).",
          "$ref": "#/$defs/FixedArcaneEnergyCostPerLevel"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/FixedArcaneEnergyCostTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "FixedArcaneEnergyCostPerLevel": {
      "description": "The AE cost are per level of the enchantment. It may either be displayed in a compressed way (e.g. `1 AE per level`) or in a verbose way (e.g. `1 AE for level I; 2 AE for level II`).",
      "oneOf": [
        {
          "const": "Compressed"
        },
        {
          "const": "Verbose"
        }
      ]
    },
    "FixedArcaneEnergyCostTranslation": {
      "type": "object",
      "properties": {
        "note": {
          "description": "A note, appended to the generated option string in parenthesis.",
          "$ref": "./_ResponsiveText.schema.json#/$defs/ResponsiveTextOptional"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "ArcaneEnergyCostPerCountable": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The AE cost value that has to be per a specific countable entity.",
          "type": "integer",
          "minimum": 1
        },
        "base_value": {
          "description": "If defined, in addition to the cost per entity you have to pay a flat amount, regardless of the entity count.",
          "type": "integer",
          "minimum": 1
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/ArcaneEnergyCostPerCountableTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "value",
        "translations"
      ],
      "additionalProperties": false
    },
    "ArcaneEnergyCostPerCountableTranslation": {
      "type": "object",
      "properties": {
        "per": {
          "description": "The cost have to be per a specific countable entity, e.g. `8 AE per person`.",
          "$ref": "./_ResponsiveText.schema.json#/$defs/ResponsiveText"
        },
        "note": {
          "description": "A note, appended to the generated string in parenthesis.",
          "$ref": "./_ResponsiveText.schema.json#/$defs/ResponsiveTextOptional"
        }
      },
      "required": [
        "per"
      ],
      "additionalProperties": false
    },
    "IntervalArcaneEnergyCost": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The AE cost value that has to be payed each interval.",
          "type": "integer",
          "minimum": 1
        },
        "interval": {
          "description": "The time interval for which the AE cost `value` has to be paid.",
          "$ref": "./_ActivatableSkillDuration.schema.json#/$defs/DurationUnitValue"
        }
      },
      "required": [
        "value",
        "interval"
      ],
      "additionalProperties": false
    },
    "ActivationAndHalfIntervalArcaneEnergyCost": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The AE cost value that has to be payed for activation. Half of this value has to be payed each interval.",
          "type": "integer",
          "minimum": 2,
          "multipleOf": 2
        },
        "interval": {
          "description": "The time interval for which the AE cost `value` has to be paid.",
          "$ref": "./_ActivatableSkillDuration.schema.json#/$defs/DurationUnitValue"
        }
      },
      "required": [
        "value",
        "interval"
      ],
      "additionalProperties": false
    },
    "IndefiniteArcaneEnergyCost": {
      "type": "object",
      "properties": {
        "modifier": {
          "description": "Specified if the indefinite AP cost description needs to be modified by a certain value.",
          "$ref": "#/$defs/IndefiniteArcaneEnergyCostModifier"
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/IndefiniteArcaneEnergyCostTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "translations"
      ],
      "additionalProperties": false
    },
    "IndefiniteArcaneEnergyCostModifier": {
      "type": "object",
      "properties": {
        "arithmetic": {
          "description": "The arithmetic how to apply the `value` to the `base`.",
          "$ref": "#/$defs/IndefiniteArcaneEnergyCostModifierArithmetic"
        },
        "value": {
          "description": "The value that is applied to the `base` using the defined `arithmetic`.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "arithmetic",
        "value"
      ],
      "additionalProperties": false
    },
    "IndefiniteArcaneEnergyCostModifierArithmetic": {
      "const": "Add"
    },
    "IndefiniteArcaneEnergyCostTranslation": {
      "type": "object",
      "properties": {
        "description": {
          "description": "A description of where the cost come from.",
          "$ref": "./_ResponsiveText.schema.json#/$defs/ResponsiveText"
        }
      },
      "required": [
        "description"
      ],
      "additionalProperties": false
    },
    "ArcaneEnergyCostDisjunction": {
      "type": "object",
      "properties": {
        "interval": {
          "description": "Specified if the selected AE cost option has to be paid for each time interval.",
          "$ref": "#/$defs/ArcaneEnergyCostDisjunctionInterval"
        },
        "options": {
          "description": "The possible AE cost values.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArcaneEnergyCostDisjunctionOption"
          }
        }
      },
      "required": [
        "options"
      ],
      "additionalProperties": false
    },
    "ArcaneEnergyCostDisjunctionInterval": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The interval itself.",
          "$ref": "./_ActivatableSkillDuration.schema.json#/$defs/DurationUnitValue"
        },
        "activation_value": {
          "description": "The AE cost value for activation.",
          "type": "integer",
          "minimum": 1
        },
        "after_activation": {
          "description": "Set to `true` if the action where the enchantment is casted does\n**not** as a part of the first interval that has to be payed, so that\nthe first interval payment needs to be done after the activation.\n\nThis works different than other sustained spells, since for them the end of the cast usually already counts as part of the first interval.",
          "type": "boolean"
        }
      },
      "required": [
        "value",
        "activation_value",
        "after_activation"
      ],
      "additionalProperties": false
    },
    "ArcaneEnergyCostDisjunctionOption": {
      "type": "object",
      "properties": {
        "value": {
          "description": "A possible AE cost value.",
          "type": "integer",
          "minimum": 1
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/ArcaneEnergyCostDisjunctionOptionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "ArcaneEnergyCostDisjunctionOptionTranslation": {
      "type": "object",
      "properties": {
        "note": {
          "description": "A note, appended to the generated option string in parenthesis.",
          "$ref": "./_ResponsiveText.schema.json#/$defs/ResponsiveTextOptional"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "NoArcaneEnergyCost": {
      "type": "object",
      "properties": {
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/NoArcaneEnergyCostTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "NoArcaneEnergyCostTranslation": {
      "type": "object",
      "properties": {
        "note": {
          "description": "A note, appended to the generated string in parenthesis.",
          "$ref": "./_ResponsiveText.schema.json#/$defs/ResponsiveTextOptional"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "Volume": {
      "description": "The volume points the enchantment needs.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Fixed"
            },
            "fixed": {
              "$ref": "#/$defs/FixedVolume"
            }
          },
          "required": [
            "tag",
            "fixed"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PerLevel"
            },
            "per_level": {
              "$ref": "#/$defs/VolumePerLevel"
            }
          },
          "required": [
            "tag",
            "per_level"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ByLevel"
            },
            "by_level": {
              "$ref": "#/$defs/VolumeByLevel"
            }
          },
          "required": [
            "tag",
            "by_level"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Map"
            },
            "map": {
              "$ref": "#/$defs/VolumeMap"
            }
          },
          "required": [
            "tag",
            "map"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "DerivedFromSelection"
            },
            "derived_from_selection": {
              "$ref": "#/$defs/VolumeDerivedFromSelection"
            }
          },
          "required": [
            "tag",
            "derived_from_selection"
          ],
          "additionalProperties": false
        }
      ]
    },
    "FixedVolume": {
      "type": "object",
      "properties": {
        "points": {
          "description": "The volume points.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "points"
      ],
      "additionalProperties": false
    },
    "VolumePerLevel": {
      "type": "object",
      "properties": {
        "points": {
          "description": "The volume points per level.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "points"
      ],
      "additionalProperties": false
    },
    "VolumeByLevel": {
      "type": "object",
      "properties": {
        "list": {
          "description": "The volume points for each level. The first element is the volume points for the first level, the second element is the volume points for the second level, and so on.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/VolumeByLevelItem"
          },
          "minItems": 2
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "VolumeByLevelItem": {
      "type": "object",
      "properties": {
        "points": {
          "description": "The volume points for this level.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "points"
      ],
      "additionalProperties": false
    },
    "VolumeMap": {
      "description": "A content that is `3/4/5 Points for Chimera, Daimonid, Golems, Undead / Fairies, Ghosts / Demons, Elementals` may be respresented as the following map:\n\n```yaml\noptions:\n  - points: 3\n    associated_options:\n      - id:\n          tag: General\n          value: # ...\n      # ...\n    translations:\n      en-US:\n        label: \"Chimera, Daimonid, Golems, Undead\"\n        label_standalone: \"Chimera/Daimonid/Golems/Undead\"\n  - points: 4\n    associated_options:\n      - id:\n          tag: General\n          value: # ...\n      # ...\n    translations:\n      en-US:\n        label: \"Fairies, Ghosts\"\n        label_standalone: \"Fairies/Ghosts\"\n  - points: 5\n    associated_options:\n      - id:\n          tag: General\n          value: # ...\n      # ...\n    translations:\n      en-US:\n        label: \"Demons, Elementals\"\n        label_standalone: \"Demons/Elementals\"\n```\n\nThis will generate the exact same string as seen above. The associated options are not present in the example, but they link to the options the volume specification is meant for.",
      "type": "object",
      "properties": {
        "options": {
          "description": "The possible costs and associated labels.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/VolumeMapOption"
          },
          "minItems": 2
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/VolumeMapTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "options"
      ],
      "additionalProperties": false
    },
    "VolumeMapTranslation": {
      "type": "object",
      "properties": {
        "list_prepend": {
          "description": "Place a string between the `for` and the grouped map option labels.",
          "type": "string"
        },
        "list_append": {
          "description": "Place a string after the grouped map option labels.",
          "type": "string"
        },
        "replacement": {
          "description": "If the string from the book cannot be generated using the default generation technique, use this string. All options still need to be inserted propertly, since it may be used by in-game tools to provide a selection to players.",
          "type": "string"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "VolumeMapOption": {
      "type": "object",
      "properties": {
        "points": {
          "description": "The full permanent AE cost value for this option.",
          "type": "integer",
          "minimum": 1
        },
        "associated_options": {
          "description": "Links to the options this volume specification is meant for.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/VolumeMapOptionAssociatedOption"
          }
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/VolumeMapOptionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "points",
        "associated_options"
      ],
      "additionalProperties": false
    },
    "VolumeMapOptionAssociatedOption": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The option's identifier.",
          "$ref": "./_IdentifierGroup.schema.json#/$defs/VolumePointsOptionReferenceIdentifier"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "VolumeMapOptionTranslation": {
      "type": "object",
      "properties": {
        "label": {
          "description": "The description of the option for cost string generation.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        },
        "label_standalone": {
          "description": "The description of the option if used standalone. Only used if different from `label`.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        }
      },
      "required": [
        "label"
      ],
      "additionalProperties": false
    },
    "VolumeDerivedFromSelection": {
      "type": "object",
      "properties": {
        "fallback": {
          "description": "The volume for the selection if it does not define a specific one.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "fallback"
      ],
      "additionalProperties": false
    },
    "BindingCost": {
      "description": "The binding cost for an enchantment.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Fixed"
            },
            "fixed": {
              "$ref": "#/$defs/FixedBindingCost"
            }
          },
          "required": [
            "tag",
            "fixed"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PerLevel"
            },
            "per_level": {
              "$ref": "#/$defs/BindingCostPerLevel"
            }
          },
          "required": [
            "tag",
            "per_level"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Map"
            },
            "map": {
              "$ref": "#/$defs/BindingCostMap"
            }
          },
          "required": [
            "tag",
            "map"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "DerivedFromSelection"
            },
            "derived_from_selection": {
              "$ref": "#/$defs/BindingCostDerivedFromSelection"
            }
          },
          "required": [
            "tag",
            "derived_from_selection"
          ],
          "additionalProperties": false
        }
      ]
    },
    "FixedBindingCost": {
      "type": "object",
      "properties": {
        "permanent_value": {
          "description": "The permanent AE cost.\n\nIf the enchantment has multiple levels, it is only applied for the first level.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "permanent_value"
      ],
      "additionalProperties": false
    },
    "BindingCostPerLevel": {
      "type": "object",
      "properties": {
        "permanent_value": {
          "description": "The permanent AE cost per level.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "permanent_value"
      ],
      "additionalProperties": false
    },
    "BindingCostMap": {
      "description": "A content that is `2/4/8 permanent AE for spell-swords with the combat technique Daggers, Swords, or Two-Handed Swords` may be respresented as the following map:\n\n```yaml\noptions:\n  - permanent_value: 2\n    translations:\n      en-US:\n        label: \"Daggers\"\n        label_standalone: \"Dagger\"\n  - permanent_value: 4\n    translations:\n      en-US:\n        label: \"Swords\"\n        label_standalone: \"Sword\"\n  - permanent_value: 8\n    translations:\n      en-US:\n        label: \"Two-Handed Swords\"\n        label_standalone: \"Two-Handed Sword\"\nlist_prepend: \"spell-swords with the combat technique\"\n```\n\nThis will generate the exact same string as seen above.",
      "type": "object",
      "properties": {
        "options": {
          "description": "The possible costs and associated labels.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/VolumeMapOption"
          },
          "minItems": 2
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/BindingCostMapTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "options"
      ],
      "additionalProperties": false
    },
    "BindingCostMapTranslation": {
      "type": "object",
      "properties": {
        "list_prepend": {
          "description": "Place a string between the `for` and the grouped map option labels.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        },
        "list_append": {
          "description": "Place a string after the grouped map option labels.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        },
        "replacement": {
          "description": "If the string from the book cannot be generated using the default generation technique, use this string. All options still need to be inserted propertly, since it may be used by in-game tools to provide a selection to players.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "BindingCostMapOption": {
      "type": "object",
      "properties": {
        "permanent_value": {
          "description": "The full permanent AE cost value for this option.",
          "type": "integer",
          "minimum": 1
        },
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/BindingCostMapOptionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [
        "permanent_value"
      ],
      "additionalProperties": false
    },
    "BindingCostMapOptionTranslation": {
      "type": "object",
      "properties": {
        "label": {
          "description": "The description of the option for cost string generation.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        },
        "label_standalone": {
          "description": "The description of the option if used standalone. Only used if different from `label`.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
        }
      },
      "required": [
        "label"
      ],
      "additionalProperties": false
    },
    "BindingCostDerivedFromSelection": {
      "type": "object",
      "properties": {
        "fallback": {
          "description": "The binding cost for the selection if it does not define a specific one.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "fallback"
      ],
      "additionalProperties": false
    },
    "PropertyDeclaration": {
      "description": "The magic property's identifier. `DependingOnProperty` can only be used if the special ability has an option to select a property.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "DependingOnSelection"
            },
            "depending_on_selection": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "depending_on_selection"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Fixed"
            },
            "fixed": {
              "$ref": "./_SimpleReferences.schema.json#/$defs/PropertyReference"
            }
          },
          "required": [
            "tag",
            "fixed"
          ],
          "additionalProperties": false
        }
      ]
    },
    "AspectDeclaration": {
      "description": "The blessed aspect.",
      "$ref": "./_SimpleReferences.schema.json#/$defs/AspectReference"
    },
    "AdvancedSpecialAbilityDerivedExternalEntryId": {
      "$ref": "./_Identifier.schema.json#/$defs/MagicalTraditionIdentifier"
    },
    "AdvancedSpecialAbilityDerivedExternalEntryOptionId": {
      "$ref": "./_Identifier.schema.json#/$defs/PatronIdentifier"
    },
    "PrerequisitesReplacement": {
      "description": "The prerequisites text. It is only used if the text cannot be generated from the given information.",
      "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyMarkdown"
    },
    "ApplicableCombatTechniques": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "None"
            },
            "none": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "none"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "DependingOnCombatStyle"
            },
            "depending_on_combat_style": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "depending_on_combat_style"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "All"
            },
            "all": {
              "$ref": "#/$defs/AllApplicableCombatTechniques"
            }
          },
          "required": [
            "tag",
            "all"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "AllClose"
            },
            "all_close": {
              "$ref": "#/$defs/AllApplicableCloseCombatTechniques"
            }
          },
          "required": [
            "tag",
            "all_close"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "AllRanged"
            },
            "all_ranged": {
              "$ref": "#/$defs/AllApplicableRangedCombatTechniques"
            }
          },
          "required": [
            "tag",
            "all_ranged"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Specific"
            },
            "specific": {
              "$ref": "#/$defs/SpecificApplicableCombatTechniques"
            }
          },
          "required": [
            "tag",
            "specific"
          ],
          "additionalProperties": false
        }
      ]
    },
    "AllApplicableCombatTechniques": {
      "type": "object",
      "properties": {
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ApplicableAllCombatTechniquesRestriction"
          },
          "minItems": 1
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "AllApplicableCloseCombatTechniques": {
      "type": "object",
      "properties": {
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ApplicableCloseCombatTechniquesRestriction"
          },
          "minItems": 1
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "AllApplicableRangedCombatTechniques": {
      "type": "object",
      "properties": {
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ApplicableRangedCombatTechniquesRestriction"
          },
          "minItems": 1
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "SpecificApplicableCombatTechniques": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SpecificApplicableCombatTechnique"
          },
          "minItems": 1
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "SpecificApplicableCombatTechnique": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "./_IdentifierGroup.schema.json#/$defs/CombatTechniqueIdentifier"
        },
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ApplicableSpecificCombatTechniquesRestriction"
          },
          "minItems": 1
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "ApplicableAllCombatTechniquesRestriction": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Improvised"
            },
            "improvised": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "improvised"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PointedBlade"
            },
            "pointed_blade": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "pointed_blade"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Mount"
            },
            "mount": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "mount"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Race"
            },
            "race": {
              "$ref": "#/$defs/ApplicableCombatTechniquesRaceRestriction"
            }
          },
          "required": [
            "tag",
            "race"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ExcludeCombatTechniques"
            },
            "exclude_combat_techniques": {
              "type": "object",
              "properties": {
                "list": {
                  "description": "The combat techniques this combat special ability is **not** applicable to.",
                  "type": "array",
                  "items": {
                    "$ref": "./_SimpleReferences.schema.json#/$defs/CombatTechniqueReference"
                  },
                  "minItems": 1,
                  "uniqueItems": true
                }
              },
              "required": [
                "list"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "exclude_combat_techniques"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ApplicableCloseCombatTechniquesRestriction": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Improvised"
            },
            "improvised": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "improvised"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PointedBlade"
            },
            "pointed_blade": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "pointed_blade"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Mount"
            },
            "mount": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "mount"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "HasParry"
            },
            "has_parry": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "has_parry"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "OneHanded"
            },
            "one_handed": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "one_handed"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ParryingWeapon"
            },
            "parrying_weapon": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "parrying_weapon"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Race"
            },
            "race": {
              "$ref": "#/$defs/ApplicableCombatTechniquesRaceRestriction"
            }
          },
          "required": [
            "tag",
            "race"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ExcludeCombatTechniques"
            },
            "exclude_combat_techniques": {
              "type": "object",
              "properties": {
                "list": {
                  "description": "The combat techniques this combat special ability is **not** applicable to.",
                  "type": "array",
                  "items": {
                    "$ref": "./_SimpleReferences.schema.json#/$defs/CloseCombatTechniqueReference"
                  },
                  "minItems": 1,
                  "uniqueItems": true
                }
              },
              "required": [
                "list"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "exclude_combat_techniques"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ApplicableRangedCombatTechniquesRestriction": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Improvised"
            },
            "improvised": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "improvised"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PointedBlade"
            },
            "pointed_blade": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "pointed_blade"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Mount"
            },
            "mount": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "mount"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Race"
            },
            "race": {
              "$ref": "#/$defs/ApplicableCombatTechniquesRaceRestriction"
            }
          },
          "required": [
            "tag",
            "race"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ExcludeCombatTechniques"
            },
            "exclude_combat_techniques": {
              "type": "object",
              "properties": {
                "list": {
                  "description": "The combat techniques this combat special ability is **not** applicable to.",
                  "type": "array",
                  "items": {
                    "$ref": "./_SimpleReferences.schema.json#/$defs/RangedCombatTechniqueReference"
                  },
                  "minItems": 1,
                  "uniqueItems": true
                }
              },
              "required": [
                "list"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "exclude_combat_techniques"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ApplicableSpecificCombatTechniquesRestriction": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Improvised"
            },
            "improvised": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "improvised"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "PointedBlade"
            },
            "pointed_blade": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "pointed_blade"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Mount"
            },
            "mount": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "mount"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Race"
            },
            "race": {
              "$ref": "#/$defs/ApplicableCombatTechniquesRaceRestriction"
            }
          },
          "required": [
            "tag",
            "race"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Level"
            },
            "level": {
              "$ref": "#/$defs/ApplicableCombatTechniquesLevelRestriction"
            }
          },
          "required": [
            "tag",
            "level"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Weapons"
            },
            "weapons": {
              "$ref": "#/$defs/ApplicableCombatTechniquesWeaponRestriction"
            }
          },
          "required": [
            "tag",
            "weapons"
          ],
          "additionalProperties": false
        }
      ]
    },
    "ApplicableCombatTechniquesRaceRestriction": {
      "$ref": "./_SimpleReferences.schema.json#/$defs/RaceReference"
    },
    "ApplicableCombatTechniquesLevelRestriction": {
      "type": "object",
      "properties": {
        "level": {
          "description": "The combat special ability is only applicable on a certain level.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "level"
      ],
      "additionalProperties": false
    },
    "ApplicableCombatTechniquesWeaponRestriction": {
      "type": "object",
      "properties": {
        "list": {
          "description": "The specific weapons this combat special ability is only applicable to.",
          "type": "array",
          "items": {
            "$ref": "./_SimpleReferences.schema.json#/$defs/WeaponReference"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "required": [
        "list"
      ],
      "additionalProperties": false
    },
    "AdventurePointsValue": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Fixed"
            },
            "fixed": {
              "$ref": "#/$defs/FixedAdventurePointsValue"
            }
          },
          "required": [
            "tag",
            "fixed"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "ByLevel"
            },
            "by_level": {
              "$ref": "#/$defs/AdventurePointsValueByLevel"
            }
          },
          "required": [
            "tag",
            "by_level"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "DerivedFromSelection"
            },
            "derived_from_selection": {
              "$ref": "#/$defs/AdventurePointsDerivedFromSelection"
            }
          },
          "required": [
            "tag",
            "derived_from_selection"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "tag": {
              "const": "Indefinite"
            },
            "indefinite": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": [
            "tag",
            "indefinite"
          ],
          "additionalProperties": false
        }
      ]
    },
    "FixedAdventurePointsValue": {
      "description": "A fixed adventure points value. If the entry has levels, this is the cost per level as well.",
      "$ref": "#/$defs/AdventurePointsSingleValue"
    },
    "AdventurePointsValueByLevel": {
      "description": "An entry with levels may have different costs for each level. The length of the list must match the amount of levels the special ability has.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/AdventurePointsSingleValue"
      },
      "minItems": 2
    },
    "AdventurePointsDerivedFromSelection": {
      "description": "The adventure points value is derived from the selection of the special ability. Its display value may be able to be derived from the given information for the select options. If that is not the case or the generated text would not match the original one, a replacement text can be provided.",
      "type": "object",
      "properties": {
        "translations": {
          "description": "All translations for the entry, identified by IETF language tag (BCP47).",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}-[A-Z]{2}$": {
              "$ref": "#/$defs/AdventurePointsDerivedFromSelectionTranslation"
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "AdventurePointsDerivedFromSelectionTranslation": {
      "type": "object",
      "properties": {
        "replacement": {
          "description": "A replacement for the generated text if it would not match the original one.",
          "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyMarkdown"
        }
      },
      "required": [],
      "minProperties": 1,
      "additionalProperties": false
    },
    "AdventurePointsSingleValue": {
      "description": "A single adventure points value.",
      "type": "integer",
      "minimum": 0
    },
    "Input": {
      "description": "A string that is used as a label for an input field.",
      "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyString"
    },
    "AdventurePointsValueReplacement": {
      "description": "The AP value. It is only used if the text cannot be generated from the given information.",
      "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyMarkdown"
    },
    "AdventurePointsValueAppend": {
      "description": "A string that gets appended to the default AP Value text with a preceding space. This always happens if present, even if the generated AP Value text is replaced.",
      "$ref": "./_NonEmptyString.schema.json#/$defs/NonEmptyMarkdown"
    }
  }
}
